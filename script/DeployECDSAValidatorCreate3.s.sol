// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.29;

import '../src/deployer/Deployer.sol';
import {Script, console} from 'forge-std/Script.sol';

// Note: Shall only be used to deploy another copy of ECDSA default validator, in case EOA onboarding factory is to be deployed
contract DeployECDSAValidatorCreate3 is Script {
  Deployer deployerInstance;
  address entryPoint;
  mapping(uint256 => uint256) public DEPLOYMENT_CHAIN_GAS_PRICES;

  error NoGasPriceSet();
  error ContractDeploymentFailed();

  function setUp() public {
    deployerInstance = Deployer(vm.envAddress('DEPLOYER_CONTRACT_ADDRESS')); // Set Deployer contract
    // EntryPoint v0.7 address
    entryPoint = vm.parseAddress('0x0000000071727De22E5E9d8BAf0edAc6f37da032');
    DEPLOYMENT_CHAIN_GAS_PRICES[1946] = 0.002 gwei;
    DEPLOYMENT_CHAIN_GAS_PRICES[1868] = 0.001 gwei;
  }

  function run() public {
    uint256 deployerPrivateKey = vm.envUint('PRIVATE_KEY');

    string memory contractName = 'ECDSAValidator';
    string memory saltString = vm.envString('ECDSA_VALIDATOR_SALT');

    bytes memory deployedBytecode =
      hex'608080604052346015576114e7908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806306fdde03146101045780630807dbc1146100ff57806354fd4d50146100fa5780635c81ca68146100f55780636d61fe70146100f05780638a91b0e3146100eb578063940d3840146100e657806397003203146100e1578063d60b347f146100dc578063d620c85a146100d7578063e824b568146100d2578063ecd05961146100cd578063f2fde38b146100c8578063f551e2ee146100c35763fa544161146100be575f80fd5b6107f7565b610744565b6106c5565b6106a5565b610676565b610654565b610606565b610555565b6104bd565b6103e0565b6102c4565b610236565b6101f7565b610194565b610133565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b3461017f575f36600319011261017f5761017b60405161015460408261083e565b600e81526d22a1a229a0ab30b634b230ba37b960911b602082015260405191829182610109565b0390f35b5f80fd5b6001600160a01b0381160361017f57565b3461017f57604036600319011261017f5760206101ec6004356101b681610183565b6001600160a01b03602435916101cb83610183565b165f526002835260405f20906001600160a01b03165f5260205260405f2090565b541515604051908152f35b3461017f575f36600319011261017f5761017b60405161021860408261083e565b60058152640312e302e360dc1b602082015260405191829182610109565b3461017f57602036600319011261017f576102656001600160a01b0360043561025e81610183565b1633610b8a565b005b9181601f8401121561017f5782359167ffffffffffffffff831161017f576020838186019501011161017f57565b602060031982011261017f576004359067ffffffffffffffff821161017f576102c091600401610267565b9091565b3461017f576102d236610295565b9081156103d1576102ff336001600160a01b03165f525f6020526001600160a01b0360405f205416151590565b6103c2578160141161017f5761032681356bffffffffffffffffffffffff19165b60601c90565b6001600160a01b0381169081156103b35761037090610355336001600160a01b03165f525f60205260405f2090565b906001600160a01b03166001600160a01b0319825416179055565b337fa5e1f8b4009110f5525798d04ae2125421a12d0590aa52c13682ff1bd3c492ca5f80a36014821161039f57005b81610265926103ad92610865565b90610946565b630640d5fb60e51b5f5260045ffd5b637396742f60e11b5f5260045ffd5b6307ca8e0760e21b5f5260045ffd5b3461017f576103ee36610295565b5050610416336001600160a01b03165f525f6020526001600160a01b0360405f205416151590565b156104aa57335f525f60205260405f206001600160a01b03198154169055337f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da5f80a2335f52600160205260405f205460015b8181111561047357005b8082038281116104a55761048c61049491336001611452565b336001610d2f565b505f1981146104a557600101610469565b610921565b63f91bd6f160e01b5f523360045260245ffd5b3461017f57606036600319011261017f5760043560243567ffffffffffffffff811161017f576104f1903690600401610267565b60443567ffffffffffffffff811161017f57610511903690600401610267565b601481949294036105465760141161017f5761017b93610534933560601c6109bc565b60405190151581529081906020820190565b630dfe930960e41b5f5260045ffd5b3461017f57604036600319011261017f5760043567ffffffffffffffff811161017f5780360361012060031982011261017f57602435906105a2836004013561059d81610183565b6108da565b92610104810135916022190182121561017f57019060048201359167ffffffffffffffff831161017f5760240190823603821361017f576105e2936109bc565b156105fc5761017b5f5b6040519081529081906020820190565b61017b60016105ec565b3461017f57602036600319011261017f57602061064a60043561062881610183565b6001600160a01b03165f525f6020526001600160a01b0360405f205416151590565b6040519015158152f35b3461017f575f36600319011261017f57604051636b10642d60e11b8152602090f35b3461017f57602036600319011261017f576102656001600160a01b0360043561069e81610183565b1633610c7f565b3461017f57602036600319011261017f5760206040516001600435148152f35b3461017f57602036600319011261017f576004356106e281610183565b6001600160a01b0381169081156103b35761071d90335f525f60205260405f20906001600160a01b03166001600160a01b0319825416179055565b337fa5e1f8b4009110f5525798d04ae2125421a12d0590aa52c13682ff1bd3c492ca5f80a3005b3461017f57606036600319011261017f5760043561076181610183565b60443560243567ffffffffffffffff821161017f5761017b9261078b6107af933690600401610267565b92909182808501601f19013561649261ffff30801c190402146107e2575b50610a2d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681529081906020820190565b6040810135018035945060200192505f6107a9565b3461017f57602036600319011261017f57602061081960043561059d81610183565b6001600160a01b0360405191168152f35b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111761086057604052565b61082a565b909291928360141161017f57831161017f57601401916013190190565b9093929384831161017f57841161017f578101920390565b356bffffffffffffffffffffffff198116929190601482106108ba575050565b6bffffffffffffffffffffffff1960149290920360031b82901b16169150565b6001600160a01b0381165f525f6020526001600160a01b0360405f20541680155f14610904575090565b905090565b6001600160a01b0361091e9216906001610c18565b90565b634e487b7160e01b5f52601160045260245ffd5b90816014029160148304036104a557565b601482066109ad575f5b60148304811061095f57505050565b80601402906014820481036104a55760018101918282116104a5576109a061032061099a6109a693610992600197610935565b908989610882565b9061089a565b33610909565b5001610950565b637c148cd960e01b5f5260045ffd5b926001600160a01b0393846109d28386866112f6565b911694168414610a24576001600160a01b0392610a15926020527b19457468657265756d205369676e6564204d6573736167653a0a33325f52603c6004206112f6565b1614610a1f575f90565b600190565b50505050600190565b9291908215610b3d575b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0602083013511610b2e576001600160a01b035f94166dd9ecebf3c23529de49815dac1c4c8114908115610b24575b8115610af4575b50610ad8575b8315610ac5575b8315610ab3575b505050155f03631626ba7e1760e01b90565b610abd9350611252565b5f8080610aa1565b9250610ad2828285610f80565b92610a9a565b9250610aee828285610ae9336108da565b6109bc565b92610a93565b90505f526002602052610b1b3360405f20906001600160a01b03165f5260205260405f2090565b5415155f610a8d565b3381149150610a86565b638baa579f60e01b5f5260045ffd5b61773961ffff841904028103610a375750637739000160e01b9392505050565b600190610b84935f520160205260405f20906001600160a01b03165f5260205260405f2090565b54151590565b610b9682826001610b5d565b610c1257805f52600160205260405f2054607f811015610c0057505f8181526001602081815260408084208054909301600581901b84018790559283905594835260029052929020610bfa91905b906001600160a01b03165f5260205260405f2090565b55600190565b63243acef960e21b5f5260045260245ffd5b50505f90565b91610c24818385610b5d565b610c7857815f528260205260405f2054607f811015610c0057505f8281526020848152604080832080546001908101600581901b83018790559182905594845293909501905292909220610bfa9190610be4565b5050505f90565b90805f526002602052610ca68260405f20906001600160a01b03165f5260205260405f2090565b54918215610c78575f198301918383116104a5575f828152600160205260409020545f198101919082116104a5575f94848484610be495610bfa9803610d05575b509050610cf69150600161149f565b6002905f5260205260405f2090565b610d2592610cf6610d1b610be493856001611452565b8092856001611481565b555f808481610ce7565b906001820192805f5283602052610d5a8260405f20906001600160a01b03165f5260205260405f2090565b54908115610df1575f198201948286116104a557610d818486905f5260205260405f205490565b5f198101969087116104a55784610bfa96610be49583838b5f9c610dae9703610dbb575b5050505061149f565b905f5260205260405f2090565b610de792610dd9610dd0610be4938589611452565b80928589611481565b88905f5260205260405f2090565b555f808381610da5565b50505050505f90565b81601f8201121561017f5780519067ffffffffffffffff82116108605760405192610e2f601f8401601f19166020018561083e565b8284526020838301011161017f57815f9260208093018386015e8301015290565b5190610e5b82610183565b565b9080601f8301121561017f5781519167ffffffffffffffff8311610860578260051b9060405193610e91602084018661083e565b845260208085019282010192831161017f57602001905b828210610eb55750505090565b8151815260209182019101610ea8565b9060e08282031261017f5781517fff000000000000000000000000000000000000000000000000000000000000008116810361017f5792602083015167ffffffffffffffff811161017f5782610f1c918501610dfa565b92604081015167ffffffffffffffff811161017f5783610f3d918301610dfa565b92606082015192610f5060808401610e50565b9260a08101519260c082015167ffffffffffffffff811161017f5761091e9201610e5d565b6040513d5f823e3d90fd5b90923093306111a5575b60405190600119858201013560f01c94600e830196869187810384016041198101976119015f5260408960203789158a604201841017816042601e20181761116557506d0a8f2e0cac888c2e8c2a6d2cedc560931b86526001198101999889818c82378188016028600e8201526029600d8201515f1a0361110f575b506f07fffffe000000000000010000000000919250999899515f1a1c5b88515f1a602881146110445790651201000000016001921c17980197611023565b5092949699908698604061091e9b83605c96989a957f20636f6e74656e74732c737472696e67206e616d652c737472696e670000000085527f2076657273696f6e2c75696e7432353620636861696e49642c61646472657373601c8601527f20766572696679696e67436f6e74726163742c627974657333322073616c7429603c8601528785013788370103018620835260e08320604052600116604201601e2092604119910301935b60405215611100575b610ae9336108da565b61110a903361138f565b6110f7565b60015f5b016029600d82840301515f1a14848210111561113157600190611113565b6028915080806040600e936f07fffffe000000000000010000000000970397886041199101010185378a0101538291611006565b94969950509550505061091e94505f907f983e65e5148e570cd828ead231ee759a8d7958721a768f93bc4483ba005c32de5f5260205260405f20916110ee565b6040516342580cb760e11b815294505f85600481335afa801561124d575f955f5f905f925f94611214575b50906001600160a01b039291604051996020815191012060408b01526020815191012060608a015260808901521660a087015260c086015260e08501604052610f8a565b925050506001600160a01b03965061123e91503d805f833e611236818361083e565b810190610ec5565b509399939450929091906111d0565b610f75565b9092915f933a1561126257505050565b90919293503a3a5260203a3a386d378edcd5b5b0a24f5342d8c1048561fffffa503a5115611298575b61091e92610ae9336108da565b60405192631626ba7e3a526d378edcd5b5b0a24f5342d8c1048560205260408052454561ffff011793845a106d378edcd5b5b0a24f5342d8c104858314176112f45761091e943a906064601c3a923090fa50604052925061128b565bfe5b90929192604051938060401461134f5760411461131f57505050505b638baa579f5f526004601cfd5b806040809201355f1a60205281375b5f526020600160805f825afa51915f6060526040523d610e5b575050611312565b508060207f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92013590601b8260ff1c01602052356040521660605261132e565b5f6001600160a01b03916004604051809481936342580cb760e11b8352165afa90811561124d5760a0915f915f5f915f9361142d575b50604051937f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f855260208151910120602085015260208151910120604084015260608301526080820152206719010000000000005f52601a52603a526042601820905f603a52565b9250505061144591503d805f833e611236818361083e565b509394509250905f6113c5565b905f5260205260405f209081548110156114715760010160051b015490565b638277484f5f526020526024601cfd5b905f5260205260405f209081548110156114715760010160051b0155565b905f5260205260405f2080549081156114e3575f198201918083116104a55781548310156114d2575f9060051b82015555565b82638277484f5f526020526024601cfd5b505056';

    // Load environment variables

    // Concatenate bytecode + constructor arguments if any
    bytes memory finalBytecode = abi.encodePacked(deployedBytecode);

    // Deploy contract if needed
    deployGeneric(deployerPrivateKey, saltString, finalBytecode, contractName);
  }

  function deployGeneric(
    uint256 deployerPrivateKey,
    string memory saltString,
    bytes memory finalBytecode,
    string memory contractName
  ) public {
    // Compute derived salt
    bytes32 derivedSalt = keccak256(abi.encodePacked(saltString));

    // Compute contract address before deployment
    address computedAddress = deployerInstance.addressOf(derivedSalt);

    console.log(string(abi.encodePacked(contractName, ' Computed Address:')), computedAddress);

    // Check if contract is already deployed
    uint256 codeSize;
    assembly {
      codeSize := extcodesize(computedAddress)
    }

    if (codeSize == 0) {
      console.log(string(abi.encodePacked(contractName, ' not deployed, deploying now...')));
      deployContract(deployerPrivateKey, derivedSalt, finalBytecode, contractName, computedAddress);
    } else {
      console.log(string(abi.encodePacked(contractName, ' already deployed at:')), computedAddress);
    }
  }

  function deployContract(
    uint256 deployerPrivateKey,
    bytes32 derivedSalt,
    bytes memory finalBytecode,
    string memory contractName,
    address computedAddress
  ) internal {
    uint256 chainId = block.chainid;

    uint256 gasPrice = DEPLOYMENT_CHAIN_GAS_PRICES[chainId];
    require(gasPrice > 0, NoGasPriceSet());

    console.log('Using gas price:', gasPrice);

    // Deploy contract using deployer's private key
    vm.startBroadcast(deployerPrivateKey);
    (bool success,) = address(deployerInstance).call{gas: 5_000_000}(
      abi.encodeWithSignature('deploy(bytes32,bytes)', derivedSalt, finalBytecode)
    );
    vm.stopBroadcast();

    require(success, ContractDeploymentFailed());

    console.log(string(abi.encodePacked('Transaction success: ', contractName)));

    // Verify deployment by checking contract existence
    uint256 codeSize;
    assembly {
      codeSize := extcodesize(computedAddress)
    }

    if (codeSize == 0) {
      console.log(string(abi.encodePacked('Invalid deployment of ', contractName)));
    } else {
      console.log(string(abi.encodePacked(contractName, ' Deployed Successfully at:')), computedAddress);
    }
  }
}
