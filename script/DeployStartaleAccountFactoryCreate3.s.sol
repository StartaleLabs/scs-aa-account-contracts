// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.29;

import '../src/deployer/Deployer.sol';
import {Script, console} from 'forge-std/Script.sol';

contract DeployStartaleAccountFactoryCreate3 is Script {
  Deployer deployerInstance;
  address entryPoint;
  mapping(uint256 => uint256) public DEPLOYMENT_CHAIN_GAS_PRICES;

  error NoGasPriceSet();
  error ContractDeploymentFailed();

  function setUp() public {
    deployerInstance = Deployer(vm.envAddress('DEPLOYER_CONTRACT_ADDRESS')); // Set Deployer contract
    // EntryPoint v0.7 address
    entryPoint = vm.parseAddress('0x0000000071727De22E5E9d8BAf0edAc6f37da032');
    DEPLOYMENT_CHAIN_GAS_PRICES[1946] = 0.002 gwei;
    DEPLOYMENT_CHAIN_GAS_PRICES[1868] = 0.001 gwei;
  }

  function run() public {
    uint256 deployerPrivateKey = vm.envUint('PRIVATE_KEY');

    string memory contractName = 'StartaleAccountFactory';
    string memory saltString = vm.envString('STARTALE_SMART_ACCOUNT_FACTORY_SALT');

    bytes memory deployedBytecode =
      hex'60a03461010357601f610d2138819003918201601f19168301916001600160401b03831184841017610107578084926040948552833981010312610103576100468161011b565b906001600160a01b039061005c9060200161011b565b1680638b78c6d819547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3638b78c6d8198190556001600160a01b038216156100f457156100e557803b156100d657608052604051610bf190816101308239608051818181610102015281816101d2015261064e0152f35b632e07c4bd60e11b5f5260045ffd5b6342bcdf7f60e11b5f5260045ffd5b630abd577760e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036101035756fe60806040526004361015610011575f80fd5b5f5f3560e01c80632569296214610672578063290ab9841461062f57806345171159146105775780634a1ce599146104fc57806354d1f13d146104b6578063715018a61461046b5780638da5cb5b14610440578063b36f970514610377578063ea6d13ac146101c4578063f04e283e14610176578063f2fde38b14610137578063fafa2b42146100de5763fee81cf4146100a9575f80fd5b346100db5760203660031901126100db576100c26106bb565b9063389a75e1600c5252602080600c2054604051908152f35b80fd5b50346100db5760206101266100ff6100f5366106d1565b9291903691610778565b907f000000000000000000000000000000000000000000000000000000000000000061084f565b6001600160a01b0360405191168152f35b5060203660031901126100db5761014c6106bb565b6101546107ae565b8060601b1561016957610166906107ca565b80f35b637448fbae82526004601cfd5b5060203660031901126100db5761018b6106bb565b6101936107ae565b63389a75e1600c528082526020600c20805442116101b757908261016692556107ca565b636f5e881883526004601cfd5b506101ce366106d1565b90917f0000000000000000000000000000000000000000000000000000000000000000926101fd368284610778565b6001600160a01b0361021082868861084f565b1694853b159182156103075761025561024791604051928391634b6a141960e01b6020840152602060248401526044830190610808565b03601f198101835282610726565b6040519161029d8084019084821067ffffffffffffffff8311176102f35792849392610288928a9694610954863961082c565b039034f5156102e857918491602096935b6102a8575b8683604051908152f35b7f47e5b5fc3bda028416e26dcf66ca5186488c0717e8ab55bb01806113f1839d589181604051928392833781018581520390209280a45f8082818061029e565b6040513d87823e3d90fd5b60248b634e487b7160e01b81526041600452fd5b50508580808034895af13d15610372573d6103218161075c565b9061032f6040519283610726565b81528760203d92013e5b1561034a5791849160209693610299565b6004867f6d963f88000000000000000000000000000000000000000000000000000000008152fd5b610339565b50346100db5760403660031901126100db576103916106bb565b90602435916001600160a01b03831680930361043c576001600160a01b03906103b86107ae565b16801561042d578192813b156104295782916024839260405194859384927fc23a5cea00000000000000000000000000000000000000000000000000000000845260048401525af1801561041e5761040d5750f35b8161041791610726565b6100db5780f35b6040513d84823e3d90fd5b5050fd5b6004826391fdf19160e01b8152fd5b5080fd5b50346100db57806003193601126100db576020638b78c6d819546001600160a01b0360405191168152f35b50806003193601126100db5761047f6107ae565b80638b78c6d819547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380638b78c6d8195580f35b50806003193601126100db5763389a75e1600c52338152806020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c928280a280f35b50346100db5760203660031901126100db576001600160a01b0361051e6106bb565b6105266107ae565b16801561042d578082913b15610574578180916004604051809481937fbb9fe6bf0000000000000000000000000000000000000000000000000000000083525af1801561041e5761040d5750f35b50fd5b50604036600319011261061c5761058c6106bb565b6024359063ffffffff821680920361061c576001600160a01b03906105af6107ae565b1690811561062057813b1561061c575f906024604051809481937f0396cb60000000000000000000000000000000000000000000000000000000008352600483015234905af1801561061157610603575080f35b61060f91505f90610726565b005b6040513d5f823e3d90fd5b5f80fd5b6391fdf19160e01b5f5260045ffd5b3461061c575f36600319011261061c5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b5f36600319011261061c5763389a75e1600c52335f526202a30042016020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d5f80a2005b600435906001600160a01b038216820361061c57565b90604060031983011261061c5760043567ffffffffffffffff811161061c578260238201121561061c5780600401359267ffffffffffffffff841161061c576024848301011161061c57602401919060243590565b90601f8019910116810190811067ffffffffffffffff82111761074857604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff811161074857601f01601f191660200190565b9291926107848261075c565b916107926040519384610726565b82948184528183011161061c578281602093845f960137010152565b638b78c6d8195433036107bd57565b6382b429005f526004601cfd5b6001600160a01b031680638b78c6d819547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3638b78c6d81955565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6040906001600160a01b0361084c94931681528160208201520190610808565b90565b916108bc6108fb6001600160a01b0394602061029d916108ca6102476108ac6040519861087e8688018b610726565b868a52858a01966109548839604051928391634b6a141960e01b888401528760248401526044830190610808565b604051968791858301948561082c565b03601f198101875286610726565b60405194859383850197518091895e840190838201905f8252519283915e01015f815203601f198101835282610726565b5190206040519060208201927fff0000000000000000000000000000000000000000000000000000000000000084523060601b6021840152603583015260558201526055815261094c607582610726565b519020169056fe608060405261029d803803806100148161018c565b92833981016040828203126101885781516001600160a01b03811692909190838303610188576020810151906001600160401b03821161018857019281601f8501121561018857835161006e610069826101c5565b61018c565b9481865260208601936020838301011161018857815f926020809301865e8601015260017f754fd8b321c4649cb777ae6fdce7e89e9cceaa31a4f639795c7807eb7f1a27005d823b15610176577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916821790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a282511561015e575f8091610146945190845af43d15610156573d91610137610069846101c5565b9283523d5f602085013e6101e0565b505b604051605e908161023f8239f35b6060916101e0565b50505034156101485763b398979f60e01b5f5260045ffd5b634c9c8ce360e01b5f5260045260245ffd5b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176101b157604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160401b0381116101b157601f01601f191660200190565b9061020457508051156101f557805190602001fd5b63d6bda27560e01b5f5260045ffd5b81511580610235575b610215575090565b639996b31560e01b5f9081526001600160a01b0391909116600452602490fd5b50803b1561020d56fe60806040523615605c575f8073ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5416368280378136915af43d5f803e156058573d5ff35b3d5ffd5b00';

    // Load environment variables
    address owner = vm.envAddress('OWNER');
    address startaleAccountImplementation = vm.envAddress('STARTALE_ACCOUNT_IMPLEMENTATION');

    bytes memory constructorArgs = abi.encode(startaleAccountImplementation, owner);

    // Concatenate bytecode + constructor arguments
    bytes memory finalBytecode = abi.encodePacked(deployedBytecode, constructorArgs);

    // Deploy contract if needed
    deployGeneric(deployerPrivateKey, saltString, finalBytecode, contractName);
  }

  function deployGeneric(
    uint256 deployerPrivateKey,
    string memory saltString,
    bytes memory finalBytecode,
    string memory contractName
  ) public {
    // Compute derived salt
    bytes32 derivedSalt = keccak256(abi.encodePacked(saltString));

    // Compute contract address before deployment
    address computedAddress = deployerInstance.addressOf(derivedSalt);

    console.log(string(abi.encodePacked(contractName, ' Computed Address:')), computedAddress);

    // Check if contract is already deployed
    uint256 codeSize;
    assembly {
      codeSize := extcodesize(computedAddress)
    }

    if (codeSize == 0) {
      console.log(string(abi.encodePacked(contractName, ' not deployed, deploying now...')));
      deployContract(deployerPrivateKey, derivedSalt, finalBytecode, contractName, computedAddress);
    } else {
      console.log(string(abi.encodePacked(contractName, ' already deployed at:')), computedAddress);
    }
  }

  function deployContract(
    uint256 deployerPrivateKey,
    bytes32 derivedSalt,
    bytes memory finalBytecode,
    string memory contractName,
    address computedAddress
  ) internal {
    uint256 chainId = block.chainid;

    uint256 gasPrice = DEPLOYMENT_CHAIN_GAS_PRICES[chainId];
    require(gasPrice > 0, NoGasPriceSet());

    console.log('Using gas price:', gasPrice);

    // Deploy contract using deployer's private key
    vm.startBroadcast(deployerPrivateKey);
    (bool success,) = address(deployerInstance).call{gas: 5_000_000}(
      abi.encodeWithSignature('deploy(bytes32,bytes)', derivedSalt, finalBytecode)
    );
    vm.stopBroadcast();

    require(success, ContractDeploymentFailed());

    console.log(string(abi.encodePacked('Transaction success: ', contractName)));

    // Verify deployment by checking contract existence
    uint256 codeSize;
    assembly {
      codeSize := extcodesize(computedAddress)
    }

    if (codeSize == 0) {
      console.log(string(abi.encodePacked('Invalid deployment of ', contractName)));
    } else {
      console.log(string(abi.encodePacked(contractName, ' Deployed Successfully at:')), computedAddress);
    }
  }
}
